/** ***********************************************************************
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2018 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by all applicable intellectual property
 * laws, including trade secret and copyright laws.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 ************************************************************************* */
const { extractClusterFromEdgeHost } = require("../utils");
const {
  createTargetCookie,
  SESSION_ID_COOKIE,
  DEVICE_ID_COOKIE,
  LOCATION_HINT_COOKIE
} = require("../target-cookies");
const {
  VISITOR_ID_KEY,
  MBOX_PARAMETERS,
  DEVICE_ID_KEY,
  SESSION_ID_KEY,
  CONTENT_KEY,
  TRACE_KEY,
  EDGE_HOST_KEY,
  SESSION_ID_MAX_AGE,
  DEVICE_ID_MAX_AGE,
  LOCATION_HINT_MAX_AGE
} = require("../constants");

function createTraceSinglePayload(traceToken) {
  const result = {};

  if (traceToken) {
    result.mboxTrace = true;
  }

  return result;
}

function createSingleRequest(uri, headers, qs, timeout, body, visitorPayload) {
  const json = Object.assign({}, body);
  json[VISITOR_ID_KEY] = visitorPayload[VISITOR_ID_KEY] || undefined;
  json[MBOX_PARAMETERS] = Object.assign(
    json[MBOX_PARAMETERS] || {},
    visitorPayload[MBOX_PARAMETERS]
  );

  return {
    uri,
    headers,
    qs,
    timeout,
    json
  };
}

function processSingleResponse(existingCluster, response) {
  const result = {};
  const sessionId = response[SESSION_ID_KEY];
  const deviceId = response[DEVICE_ID_KEY];
  const content = response[CONTENT_KEY];
  const trace = response[TRACE_KEY];
  const nowInSeconds = Math.ceil(Date.now() / 1000);
  const cookies = [];
  const cluster =
    existingCluster || extractClusterFromEdgeHost(response[EDGE_HOST_KEY]);

  if (sessionId) {
    cookies.push({
      name: SESSION_ID_COOKIE,
      value: sessionId,
      expires: nowInSeconds + SESSION_ID_MAX_AGE
    });
  }

  if (deviceId) {
    cookies.push({
      name: DEVICE_ID_COOKIE,
      value: deviceId,
      expires: nowInSeconds + DEVICE_ID_MAX_AGE
    });
  }

  if (content) {
    result.content = content;
  }

  if (trace) {
    result.trace = trace;
  }

  const targetCookie = createTargetCookie(cookies);

  if (targetCookie) {
    result.targetCookie = targetCookie;
  }

  if (cluster) {
    result.targetLocationHintCookie = {
      name: LOCATION_HINT_COOKIE,
      value: cluster,
      maxAge: LOCATION_HINT_MAX_AGE
    };
  }

  return result;
}

module.exports = {
  createTraceSinglePayload,
  createSingleRequest,
  processSingleResponse
};
