/** ***********************************************************************
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2018 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by all applicable intellectual property
 * laws, including trade secret and copyright laws.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 ************************************************************************* */
const _ = require("lodash");
const uuid = require("uuid").v4;
const {
  SDK_NAME,
  SDK_NAME_HEADER_KEY,
  SDK_VERSION_HEADER_KEY,
  SDK_REQUEST_ID_HEADER_KEY,
  EDGE_CLUSTER_PREFIX,
  HOST,
  VISITOR_ID_KEY,
  MBOX_PARAMETERS,
  MCSDID_PARAMETER,
  AAMB_PARAMETER,
  MCGLH_PARAMETER
} = require("./constants");
const { DEVICE_ID_COOKIE, SESSION_ID_COOKIE } = require("./target-cookies");
const { version } = require("../../package.json");

const MC_PREFIX = "vst.";

function getSessionId(cookies, userSessionId) {
  const cookie = cookies[SESSION_ID_COOKIE];

  if (cookie && cookie.value) {
    return cookie.value;
  }

  if (userSessionId) {
    return userSessionId;
  }

  return uuid()
    .toString()
    .replace(/-/g, "");
}

function getDeviceId(cookies) {
  const cookie = cookies[DEVICE_ID_COOKIE];

  if (!cookie) {
    return null;
  }

  return cookie.value;
}

function extractClusterFromDeviceId(id) {
  if (!id) {
    return null;
  }

  const parts = id.split(".");

  if (parts.length !== 2 || !parts[1]) {
    return null;
  }

  const nodeDetails = parts[1].split("_");

  if (nodeDetails.length !== 2 || !nodeDetails[0]) {
    return null;
  }

  return nodeDetails[0];
}

function extractClusterFromEdgeHost(host) {
  if (!host) {
    return null;
  }

  const parts = host.split(".");

  if (parts.length !== 4 || !parts[0]) {
    return null;
  }

  return parts[0].replace(EDGE_CLUSTER_PREFIX, "");
}

function getCluster(deviceId, cluster) {
  return extractClusterFromDeviceId(deviceId) || cluster;
}

function createHeaders(traceToken) {
  const result = {};
  result[SDK_NAME_HEADER_KEY] = SDK_NAME;
  result[SDK_VERSION_HEADER_KEY] = version;
  result[SDK_REQUEST_ID_HEADER_KEY] = uuid();

  if (traceToken) {
    result.Authorization = traceToken;
  }

  return result;
}

function getTargetHost(serverDomain, cluster, client) {
  if (_.isString(serverDomain)) {
    return serverDomain;
  }

  if (cluster) {
    return `${EDGE_CLUSTER_PREFIX}${cluster}.${HOST}`;
  }

  return `${client}.${HOST}`;
}

function addCustomerIds(source, customerIds) {
  _.keys(customerIds).forEach(key => {
    const value = customerIds[key];
    const id = `${MC_PREFIX}${key}.id`;
    const authState = `${MC_PREFIX}${key}.authState`;

    if (!_.isNil(value.id)) {
      // eslint-disable-next-line no-param-reassign
      source[id] = value.id;
    }

    if (!_.isNil(value.authState)) {
      // eslint-disable-next-line no-param-reassign
      source[authState] = value.authState;
    }
  });
}

function createVisitorPayload(visitor, consumerId, customerIds) {
  const visitorValues = visitor.getVisitorValues();
  const result = {};
  result[MBOX_PARAMETERS] = {};
  result[MBOX_PARAMETERS][MCSDID_PARAMETER] = visitor.getSupplementalDataID(
    consumerId
  );

  addCustomerIds(result[MBOX_PARAMETERS], customerIds);

  if (_.isEmpty(visitorValues)) {
    return result;
  }

  const mid = visitorValues.MCMID;

  if (mid) {
    result[VISITOR_ID_KEY] = mid;
  }

  const aamb = visitorValues.MCAAMB;

  if (aamb) {
    result[MBOX_PARAMETERS][AAMB_PARAMETER] = aamb;
  }

  const aamlh = visitorValues.MCAAMLH;

  if (aamlh) {
    result[MBOX_PARAMETERS][MCGLH_PARAMETER] = aamlh;
  }

  return result;
}

module.exports = {
  extractClusterFromEdgeHost,
  extractClusterFromDeviceId,
  getCluster,
  getDeviceId,
  getSessionId,
  createHeaders,
  getTargetHost,
  createVisitorPayload
};
