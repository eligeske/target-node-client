/** ***********************************************************************
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2017 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by all applicable intellectual property
 * laws, including trade secret and copyright laws.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 ************************************************************************* */

const {
  parseCookies,
  TARGET_COOKIE,
  LOCATION_HINT_COOKIE
} = require("./cookies");
const {
  validateOptions,
  validateBatchPayload,
  validateSinglePayload,
  getCluster,
  getDeviceId,
  getSessionId,
  createHeaders,
  getTargetHost,
  createTrace,
  createId,
  createAamParameters,
  createSupplementalDataId,
  processBatchResponse,
  processSingleResponse,
  createBatchMboxPayload
} = require("./helper");
const { BatchMboxRequest } = require("./batch-mbox-v2-api");

const AT_PREFIX = "AT:";
const REQUEST_SENT = "request sent";
const RESPONSE_RECEIVED = "response received";

function executeRequest(
  batchMboxApi,
  options,
  userSessionId,
  payload,
  traceToken,
  responseFunc
) {
  const {
    visitor,
    config,
    logger,
    customerIds,
    targetLocationHintCookie,
    targetCookie
  } = options;
  const { serverDomain, client } = config;
  const cookies = parseCookies(targetCookie);
  const deviceId = getDeviceId(cookies);
  const cluster = getCluster(deviceId, targetLocationHintCookie);
  const host = getTargetHost(serverDomain, cluster, client);
  const sessionId = getSessionId(cookies, userSessionId);
  const headers = createHeaders(traceToken);
  const requestOptions = {
    host,
    client,
    sessionId,
    headers
  };
  const batchRequest = BatchMboxRequest.constructFromObject(payload);
  batchRequest.client = client;
  batchRequest.trace = createTrace(traceToken);
  batchRequest.id = createId(batchRequest.id, visitor, deviceId, customerIds);
  batchRequest.aamParameters = createAamParameters(
    batchRequest.aamParameters,
    visitor
  );
  batchRequest.supplementalDataId = createSupplementalDataId(
    batchRequest.mboxes,
    visitor
  );

  logger.log(AT_PREFIX, REQUEST_SENT, batchRequest);

  return batchMboxApi.execute(batchRequest, requestOptions).then(response => {
    logger.log(AT_PREFIX, RESPONSE_RECEIVED, response);

    return responseFunc(sessionId, cluster, response.data || {});
  });
}

/**
 * The Target class
 * @param {Object} options
 * @param {Object} options.visitor
 * @param {String} options.targetCookie, optional
 * @param {String} options.targetLocationHintCookie, optional
 * @param {Object} options.config
 * @param {Object} options.logger
 * @param {String} options.config.client
 * @param {String} options.config.host
 * @param {Number} options.config.timeout
 * @param {Object} HTTP client
 */
class Target {
  constructor(options, batchMboxApi) {
    this.options = options;
    this.batchMboxApi = batchMboxApi;
  }

  executeBatchMbox(userSessionId, batchPayload, traceToken) {
    try {
      validateOptions(this.options);
      validateBatchPayload(batchPayload);
    } catch (e) {
      return Promise.reject(e);
    }

    return executeRequest(
      this.batchMboxApi,
      this.options,
      userSessionId,
      batchPayload,
      traceToken,
      processBatchResponse
    );
  }

  executeSingleMbox(userSessionId, singlePayload, traceToken) {
    try {
      validateOptions(this.options);
      validateSinglePayload(singlePayload);
    } catch (e) {
      return Promise.reject(e);
    }

    const batchPayload = createBatchMboxPayload(singlePayload);

    return executeRequest(
      this.batchMboxApi,
      this.options,
      userSessionId,
      batchPayload,
      traceToken,
      processSingleResponse
    );
  }
}

Target.getCookieName = () => TARGET_COOKIE;
Target.getLocationHintCookieName = () => LOCATION_HINT_COOKIE;

module.exports = Target;
