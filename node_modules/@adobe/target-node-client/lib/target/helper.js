/** ***********************************************************************
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2018 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by all applicable intellectual property
 * laws, including trade secret and copyright laws.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 ************************************************************************* */
const { uuid, throwError } = require("../utils");
const { version } = require("../../package.json");
const Messages = require("../messages");
const {
  createTargetCookie,
  DEVICE_ID_COOKIE,
  LOCATION_HINT_COOKIE,
  SESSION_ID_COOKIE
} = require("./cookies");
const {
  BatchMboxRequest,
  VisitorId,
  MboxRequest,
  RequestLocation,
  Parameters,
  Order,
  Product
} = require("./batch-mbox-v2-api");

const EDGE_CLUSTER_PREFIX = "mboxedge";
const HOST = "tt.omtrdc.net";
const AUTH_STATE = {
  0: "unknown",
  1: "authenticated",
  2: "logged_out"
};
const SESSION_ID_MAX_AGE = 1860;
const DEVICE_ID_MAX_AGE = 63244800;
const LOCATION_HINT_MAX_AGE = 1860;

function validateOptions(options) {
  const { visitor } = options;

  if (!visitor) {
    throwError(Messages.VISITOR_REQUIRED);
  }

  const { config } = options;

  if (!config) {
    throwError(Messages.CONFIG_REQUIRED);
  }

  const { client } = config;

  if (!client) {
    throwError(Messages.CLIENT_REQUIRED);
  }

  const { logger } = options;

  if (!logger) {
    throwError(Messages.LOGGER_REQUIRED);
  }
}

function validateBatchPayload(payload) {
  if (!payload) {
    throwError(Messages.REQUEST_REQUIRED);
  }

  const { mboxes } = payload;

  if (!mboxes) {
    throwError(Messages.MBOXES_REQUIRED);
  }

  if (!Array.isArray(mboxes)) {
    throwError(Messages.MBOXES_REQUIRED);
  }

  if (mboxes.length === 0) {
    throwError(Messages.MBOXES_REQUIRED);
  }

  mboxes.forEach(e => {
    if (!e.mbox) {
      throwError(Messages.MBOX_REQUIRED);
    }
  });
}

function validateSinglePayload(payload) {
  if (!payload) {
    throwError(Messages.REQUEST_REQUIRED);
  }

  const { mbox } = payload;

  if (!mbox) {
    throwError(Messages.MBOX_REQUIRED);
  }
}

function getSessionId(cookies, userSessionId) {
  const cookie = cookies[SESSION_ID_COOKIE];

  if (cookie && cookie.value) {
    return cookie.value;
  }

  if (userSessionId) {
    return userSessionId;
  }

  return uuid();
}

function getDeviceId(cookies) {
  const cookie = cookies[DEVICE_ID_COOKIE];

  if (!cookie) {
    return undefined;
  }

  if (!cookie.value) {
    return undefined;
  }

  return cookie.value;
}

function extractClusterFromDeviceId(id) {
  if (!id) {
    return null;
  }

  const parts = id.split(".");

  if (parts.length !== 2 || !parts[1]) {
    return null;
  }

  const nodeDetails = parts[1].split("_");

  if (nodeDetails.length !== 2 || !nodeDetails[0]) {
    return null;
  }

  return nodeDetails[0];
}

function extractClusterFromEdgeHost(host) {
  if (!host) {
    return null;
  }

  const parts = host.split(".");

  if (parts.length !== 4 || !parts[0]) {
    return null;
  }

  return parts[0].replace(EDGE_CLUSTER_PREFIX, "");
}

function getCluster(deviceId, cluster) {
  return extractClusterFromDeviceId(deviceId) || cluster;
}

function createHeaders(traceToken) {
  const result = {};

  result["Content-Type"] = "application/json";
  result["X-EXC-SDK"] = "AdobeTargetNode";
  result["X-EXC-SDK-Version"] = version;
  result["X-Request-Id"] = uuid();

  if (traceToken) {
    result.Authorization = traceToken;
  }

  return result;
}

function getTargetHost(serverDomain, cluster, client) {
  if (typeof serverDomain === "string") {
    return serverDomain;
  }

  if (cluster) {
    return `${EDGE_CLUSTER_PREFIX}${cluster}.${HOST}`;
  }

  return `${client}.${HOST}`;
}

function createTrace(traceToken) {
  if (traceToken) {
    return {
      enabled: true
    };
  }

  return undefined;
}

function convertCustomerIds(customerIds) {
  return Object.keys(customerIds).reduce((acc, key) => {
    const item = {};
    const value = customerIds[key];

    if (!value) {
      return acc;
    }

    item.integrationCode = key || undefined;
    item.authenticatedState = AUTH_STATE["0"];

    if (typeof value === "object") {
      item.id = value.id || undefined;
      item.authenticatedState = AUTH_STATE[value.authState] || undefined;
    } else {
      item.id = value;
    }

    acc.push(item);

    return acc;
  }, []);
}

function getCustomerIds(ids, customerIds) {
  const hasCustomerIds = customerIds && Object.keys(customerIds).length > 0;

  if (!hasCustomerIds) {
    return ids;
  }

  const result = convertCustomerIds(customerIds);

  if (result.length === 0) {
    return ids;
  }

  return result.concat(ids || []);
}

function createId(id, visitor, deviceId, customerIds) {
  const result = id || {};

  if (deviceId) {
    result.tntId = deviceId;
  }

  const visitorValues = visitor.getVisitorValues();
  const mid = visitorValues.MCMID;

  if (mid) {
    result.marketingCloudVisitorId = mid;
  }

  const ids = getCustomerIds(result.customerIds, customerIds);

  if (ids && ids.length > 0) {
    result.customerIds = ids;
  }

  const hasValues = Object.keys(result).length > 0;

  return hasValues ? result : undefined;
}

function createAamParameters(aamParameters, visitor) {
  const result = aamParameters || {};
  const visitorValues = visitor.getVisitorValues();

  const aamb = visitorValues.MCAAMB;

  if (aamb) {
    result.blob = aamb;
  }

  const aamlh = visitorValues.MCAAMLH;

  if (aamlh) {
    result.dcsLocationHint = aamlh;
  }

  const hasValues = Object.keys(result).length > 0;

  return hasValues ? result : undefined;
}

function createSupplementalDataId(mboxes, visitor) {
  const consumerId = mboxes.map(e => `${e.mbox}#${e.indexId}`).join("|");

  return visitor.getSupplementalDataID(consumerId);
}

function getTargetCookie(sessionId, id) {
  const nowInSeconds = Math.ceil(Date.now() / 1000);
  const cookies = [];

  cookies.push({
    name: SESSION_ID_COOKIE,
    value: sessionId,
    expires: nowInSeconds + SESSION_ID_MAX_AGE
  });

  if (id && id.tntId) {
    cookies.push({
      name: DEVICE_ID_COOKIE,
      value: id.tntId,
      expires: nowInSeconds + DEVICE_ID_MAX_AGE
    });
  }

  return createTargetCookie(cookies);
}

function getTargetLocationHintCookie(requestCluster, host) {
  const hostCluster = extractClusterFromEdgeHost(host);
  const cluster = requestCluster || hostCluster;

  if (cluster) {
    return {
      name: LOCATION_HINT_COOKIE,
      value: cluster,
      maxAge: LOCATION_HINT_MAX_AGE
    };
  }

  return undefined;
}

function getBatchContent(response) {
  const result = {};
  const { id, edgeHost, mboxResponses = [], trace } = response;

  if (id) {
    result.id = id;
  }

  if (edgeHost) {
    result.edgeHost = edgeHost;
  }

  if (trace) {
    result.trace = trace;
  }

  if (mboxResponses.length > 0) {
    result.mboxResponses = mboxResponses;
  }

  const hasContent = Object.keys(result).length > 0;

  return hasContent ? result : undefined;
}

function getSingleContent(response) {
  const result = {};
  const { id = {}, edgeHost, mboxResponses = [], trace } = response;

  if (id.tntId) {
    result.tntId = id.tntId;
  }

  if (id.thirdPartyId) {
    result.thirdPartyId = id.thirdPartyId;
  }

  if (id.marketingCloudVisitorId) {
    result.marketingCloudVisitorId = id.marketingCloudVisitorId;
  }

  if (edgeHost) {
    result.edgeHost = edgeHost;
  }

  if (trace) {
    result.trace = trace;
  }

  const mboxResponse = mboxResponses[0] || {};

  if (mboxResponse.content) {
    result.content = mboxResponse.content;
  }

  if (mboxResponse.responseTokens) {
    result.responseTokens = mboxResponse.responseTokens;
  }

  if (mboxResponse.clientSideAnalyticsLoggingPayload) {
    result.clientSideAnalyticsLoggingPayload =
      mboxResponse.clientSideAnalyticsLoggingPayload;
  }

  if (mboxResponse.trace) {
    result.trace = Object.assign({}, result.trace, mboxResponse.trace);
  }

  return result;
}

function processBatchResponse(sessionId, requestCluster, response) {
  const result = {};
  const { id = {} } = response;
  result.targetCookie = getTargetCookie(sessionId, id);
  result.targetLocationHintCookie = getTargetLocationHintCookie(
    requestCluster,
    response.edgeHost
  );
  result.content = getBatchContent(response);

  return result;
}

function processSingleResponse(sessionId, requestCluster, response) {
  const result = {};
  const { id = {} } = response;
  result.targetCookie = getTargetCookie(sessionId, id);
  result.targetLocationHintCookie = getTargetLocationHintCookie(
    requestCluster,
    response.edgeHost
  );

  return Object.assign(result, getSingleContent(response));
}

function getIpAddress(payload) {
  if (!payload.requestLocation) {
    return null;
  }

  return payload.requestLocation.ipAddress;
}

function getHost(payload) {
  if (!payload.requestLocation) {
    return null;
  }

  return payload.requestLocation.host;
}

function getProduct(payload) {
  if (!payload.mboxParameters) {
    return null;
  }

  const result = new Product();
  const params = payload.mboxParameters;

  if (params.productId) {
    result.id = params.productId;
  }

  if (params.categoryId) {
    result.categoryId = params.categoryId;
  }

  return result;
}

function createBatchMboxPayload(payload) {
  const result = new BatchMboxRequest();
  result.id = new VisitorId();

  if (payload.tntId) {
    result.id.tntId = payload.tntId;
  }

  if (payload.thirdPartyId) {
    result.id.thirdPartyId = payload.thirdPartyId;
  }

  if (payload.marketingCloudVisitorId) {
    result.id.marketingCloudVisitorId = payload.marketingCloudVisitorId;
  }

  result.ipAddress = getIpAddress(payload);
  result.host = getHost(payload);

  if (payload.profileParameters) {
    result.profileParameters = Parameters.constructFromObject(
      payload.profileParameters
    );
  }

  if (payload.contentAsJson) {
    result.contentAsJson = payload.contentAsJson;
  }

  const mbox = new MboxRequest(0, payload.mbox);

  if (payload.requestLocation) {
    mbox.requestLocation = RequestLocation.constructFromObject(
      payload.requestLocation
    );
  }

  if (payload.mboxParameters) {
    mbox.parameters = Parameters.constructFromObject(payload.mboxParameters);
  }

  if (payload.order) {
    mbox.order = Order.constructFromObject(payload.order);
  }

  mbox.product = getProduct(payload);
  result.mboxes = [mbox];

  return result;
}

module.exports = {
  validateOptions,
  validateBatchPayload,
  validateSinglePayload,
  extractClusterFromEdgeHost,
  extractClusterFromDeviceId,
  getCluster,
  getDeviceId,
  getSessionId,
  createHeaders,
  getTargetHost,
  createTrace,
  convertCustomerIds,
  createId,
  createAamParameters,
  createSupplementalDataId,
  processBatchResponse,
  processSingleResponse,
  createBatchMboxPayload
};
