/** ***********************************************************************
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2017 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by all applicable intellectual property
 * laws, including trade secret and copyright laws.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 ************************************************************************* */

const Visitor = require("@adobe-mcid/visitor-js-server");

const NOOP_LOGGER = {
  log() {}
};

function random(lower, upper) {
  return lower + Math.floor(Math.random() * (upper - lower + 1));
}

function uuid() {
  let d = Date.now();

  return "xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx".replace(/[xy]/g, c => {
    /* eslint-disable */
    const r = (d + random(0, 16)) % 16 | 0;
    d = Math.floor(d / 16);
    return (c === "x" ? r : (r & 0x3) | 0x8).toString(16);
    /* eslint-enable */
  });
}

function getLogger(options) {
  if (!options.logger) {
    return NOOP_LOGGER;
  }

  const { logger } = options;

  if (typeof logger.log === "function") {
    return logger;
  }

  return NOOP_LOGGER;
}

function throwError(msg) {
  throw new Error(msg);
}

function normalizeCustomerIds(customerIds) {
  const result = Object.keys(customerIds).reduce((acc, key) => {
    const customerId = customerIds[key];

    if (!customerId) {
      return acc;
    }

    acc[key] = acc[key] || {};

    // eslint-disable-next-line eqeqeq
    if (customerId.id != undefined) {
      acc[key].id = customerId.id;
    } else {
      acc[key].id = customerId;
    }

    // eslint-disable-next-line eqeqeq
    if (customerId.authState != undefined) {
      acc[key].authState = customerId.authState;
    } else {
      acc[key].authState = Visitor.AuthState.UNKNOWN;
    }

    return acc;
  }, {});

  const isEmpty = Object.keys(result).length === 0;

  return isEmpty ? null : result;
}

function createTargetOptions(visitor, config, logger, request) {
  const { targetCookie, targetLocationHintCookie, customerIds } = request;
  const result = {
    visitor,
    config,
    logger,
    targetCookie,
    targetLocationHintCookie
  };

  if (customerIds) {
    result.customerIds = normalizeCustomerIds(customerIds);
  }

  return result;
}

function createVisitor(request, config) {
  const { organizationId } = config;
  const { visitorCookie, customerIds } = request;
  const result = request.visitor || new Visitor(organizationId, visitorCookie);

  if (customerIds) {
    result.setCustomerIDs(customerIds);
  }

  return result;
}

function createResponse(visitor, response) {
  const visitorState = { visitorState: visitor.getState() };

  return Object.assign({}, visitorState, response);
}

module.exports = {
  uuid,
  throwError,
  getLogger,
  createVisitor,
  createTargetOptions,
  createResponse
};
