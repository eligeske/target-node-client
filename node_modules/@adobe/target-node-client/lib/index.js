/** ***********************************************************************
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2017 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by all applicable intellectual property
 * laws, including trade secret and copyright laws.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 ************************************************************************* */

const Visitor = require("@adobe-mcid/visitor-js-server");
const {
  throwError,
  getLogger,
  createVisitor,
  createTargetOptions,
  createResponse
} = require("./common/utils");
const Messages = require("./common/messages");
const Target = require("./target/index");

const AMCV_PREFIX = "AMCV_";

function MarketingCloudClient(config, options) {
  const logger = getLogger(options);
  let visitor;

  /**
   * The MarketingCloudClient factory method
   * @param {Object} request
   * @param {String} request.visitorCookie, optional
   * @param {String} request.targetCookie, optional
   * @param {String} request.targetLocationHintCookie, optional
   * @param {String} request.customerIds, optional
   * @param {String} request.traceToken, optional, used to generate server side traces
   * @param {String} request.sessionId, optional, used only when multiple requests
   * @param {String} request.payload, required, Target JSON request
   * @param {String} request.visitor, optional for testing only
   * @param {String} request.target, optional for testing only
   */
  this.getOffer = request => {
    visitor = visitor || createVisitor(request, config);
    const targetOptions = createTargetOptions(visitor, config, logger, request);
    const target = request.target || new Target(targetOptions);
    const { sessionId, payload, traceToken } = request;

    return target
      .executeSingleMbox(sessionId, payload, traceToken)
      .then(res => createResponse(visitor, res));
  };

  /**
   * The MarketingCloudClient batch offers method
   * @param {Object} request
   * @param {String} request.visitorCookie, optional
   * @param {String} request.targetCookie, optional
   * @param {String} request.targetLocationHintCookie, optional
   * @param {String} request.customerIds, optional
   * @param {String} request.traceToken, optional, used to generate server side traces
   * @param {String} request.sessionId, optional, used only when multiple requests
   * @param {String} request.payload, required, Target JSON request
   * @param {String} request.visitor, optional for testing only
   * @param {String} request.target, optional for testing only
   */
  this.getOffers = request => {
    visitor = visitor || createVisitor(request, config);
    const targetOptions = createTargetOptions(visitor, config, logger, request);
    const target = request.target || new Target(targetOptions);
    const { sessionId, payload, traceToken } = request;

    return target
      .executeBatchMbox(sessionId, payload, traceToken)
      .then(res => createResponse(visitor, res));
  };
}

/**
 * The MarketingCloudClient factory method
 * @param {Object} options
 * @param {Object} options.config
 * @param {String} options.config.organizationId
 * @param {String} options.logger, optional, add custom logger
 * @param {String} options.visitor, optional for testing only
 * @param {String} options.target, optional for testing only
 */
MarketingCloudClient.create = options => {
  if (!options) {
    throwError(Messages.OPTIONS_REQUIRED);
  }

  const { config } = options;

  if (!config) {
    throwError(Messages.CONFIG_REQUIRED);
  }

  const { organizationId } = config;

  if (!organizationId) {
    throwError(Messages.ORG_ID_REQUIRED);
  }

  return new MarketingCloudClient(config, options);
};

MarketingCloudClient.getVisitorCookieName = orgId => AMCV_PREFIX + orgId;
MarketingCloudClient.getTargetCookieName = () => Target.getCookieName();
MarketingCloudClient.getTargetLocationHintCookieName = () =>
  Target.getLocationHintCookieName();
MarketingCloudClient.AuthState = Visitor.AuthState;

module.exports = MarketingCloudClient;
