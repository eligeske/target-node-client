/** ***********************************************************************
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2017 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by all applicable intellectual property
 * laws, including trade secret and copyright laws.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 ************************************************************************* */

const Visitor = require("@adobe-mcid/visitor-js-server");
const {
  throwError,
  getLogger,
  createVisitor,
  createTargetOptions,
  createResponse
} = require("./utils");
const Messages = require("./messages");
const Target = require("./target/index");
const { ApiClient, TargetBatchMboxApi } = require("./target/batch-mbox-v2-api");

const AMCV_PREFIX = "AMCV_";
const TIMEOUT = 3000;

class TargetNodeClient {
  constructor(config, options) {
    this.config = config;
    this.logger = getLogger(options);
    const timeout = config.timeout || TIMEOUT;
    const apiClient = new ApiClient({ timeout });
    this.batchMboxApi = new TargetBatchMboxApi(apiClient);
  }

  /**
   * The TargetNodeClient get offers method
   * @param {Object} request
   * @param {String} request.visitorCookie, optional
   * @param {String} request.targetCookie, optional
   * @param {String} request.targetLocationHintCookie, optional
   * @param {String} request.customerIds, optional
   * @param {String} request.traceToken, optional, used to generate server side traces
   * @param {String} request.sessionId, optional, used only when multiple requests
   * @param {String} request.payload, required, Target JSON request
   * @param {String} request.visitor, optional for testing only
   * @param {String} request.target, optional for testing only
   */
  getOffers(request) {
    const visitor = createVisitor(request, this.config);
    const targetOptions = createTargetOptions(
      visitor,
      this.config,
      this.logger,
      request
    );
    const target =
      request.target || new Target(targetOptions, this.batchMboxApi);
    const { sessionId, payload, traceToken } = request;

    return target
      .executeBatchMbox(sessionId, payload, traceToken)
      .then(res => createResponse(visitor, res));
  }

  /**
   * The TargetNodeClient get offer method
   * @param {Object} request
   * @param {String} request.visitorCookie, optional
   * @param {String} request.targetCookie, optional
   * @param {String} request.targetLocationHintCookie, optional
   * @param {String} request.customerIds, optional
   * @param {String} request.traceToken, optional, used to generate server side traces
   * @param {String} request.sessionId, optional, used only when multiple requests
   * @param {String} request.payload, required, Target JSON request
   * @param {String} request.visitor, optional for testing only
   * @param {String} request.target, optional for testing only
   */
  getOffer(request) {
    const visitor = createVisitor(request, this.config);
    const targetOptions = createTargetOptions(
      visitor,
      this.config,
      this.logger,
      request
    );
    const target =
      request.target || new Target(targetOptions, this.batchMboxApi);
    const { sessionId, payload, traceToken } = request;

    return target
      .executeSingleMbox(sessionId, payload, traceToken)
      .then(res => createResponse(visitor, res));
  }
}

/**
 * The TargetNodeClient factory method
 * @param {Object} options
 * @param {Object} options.config
 * @param {String} options.config.organizationId
 * @param {String} options.logger, optional, add custom logger
 * @param {String} options.visitor, optional for testing only
 * @param {String} options.target, optional for testing only
 */
TargetNodeClient.create = options => {
  if (!options) {
    throwError(Messages.OPTIONS_REQUIRED);
  }

  const { config } = options;

  if (!config) {
    throwError(Messages.CONFIG_REQUIRED);
  }

  const { organizationId } = config;

  if (!organizationId) {
    throwError(Messages.ORG_ID_REQUIRED);
  }

  return new TargetNodeClient(config, options);
};

TargetNodeClient.getVisitorCookieName = orgId => AMCV_PREFIX + orgId;
TargetNodeClient.getTargetCookieName = () => Target.getCookieName();
TargetNodeClient.getTargetLocationHintCookieName = () =>
  Target.getLocationHintCookieName();
TargetNodeClient.AuthState = Visitor.AuthState;

module.exports = TargetNodeClient;
